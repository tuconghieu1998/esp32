<main class="content">
    <div class="container-fluid p-0">
        <div class="row">
            <div class="col-12 col-lg-12 col-xxl-12 d-flex">
                <div class="card flex-fill">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Sensor Config</h5>
                    </div>
                    <div class="p-2">
                        <a href="javascript:void(0)" onclick="exportExcel()" class="btn btn-success">
                            <i class="fas fa-file-excel"></i> Export to Excel
                        </a>
                        <button type="button" class="btn btn-primary" onclick="addConfig()">
                            Add Sensor Config
                        </button>
                        <button id="syncConfigBtn" type="button" class="btn btn-warning" onclick="syncConfig()">
                            Sync Config
                        </button>
                    </div>
                    <table class="table table-hover my-0">
                        <thead>
                            <tr>
                                <th class="d-none d-xl-table-cell">No</th>
                                <th class="d-none d-xl-table-cell">Sensor ID</th>
                                <th class="d-none d-xl-table-cell">Machine No</th>
                                <th class="d-none d-md-table-cell">Line</th>
                                <th class="d-none d-md-table-cell">Note</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody id="tableBody">
                        </tbody>
                    </table>
                    <nav aria-label="Page navigation">
                        <ul class="pagination justify-content-center mt-3" id="pagination">
                        </ul>
                    </nav>
                </div>
            </div>
        </div>
    </div>
    <!-- Modal Add -->
    <div class="modal fade" id="addDataModal" tabindex="-1" aria-labelledby="addDataModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content" style="max-width: 500px; margin: auto;">
                <div class="modal-header">
                    <h5 class="modal-title" id="addDataModalLabel">Add Config</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="addMachineForm">
                        <div class="mb-3">
                            <label for="sensorId" class="form-label">Sensor ID</label>
                            <input type="text" class="form-control" id="sensorId" required>
                        </div>
                        <div class="mb-3">
                            <label for="machineNo" class="form-label">Machine No</label>
                            <input type="number" class="form-control" id="machineId" required>
                        </div>
                        <div class="mb-3">
                            <label for="line" class="form-label">Line</label>
                            <input type="number" class="form-control" id="line" required>
                        </div>
                        <div class="mb-3">
                            <label for="note" class="form-label">Note</label>
                            <textarea class="form-control" id="note" rows="2"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary" form="addMachineForm">Save</button>
                </div>
            </div>
        </div>
    </div>
    <!-- Modal Add -->
    <div class="modal fade" id="editDataModal" tabindex="-1" aria-labelledby="editDataModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content" style="max-width: 500px; margin: auto;">
                <div class="modal-header">
                    <h5 class="modal-title" id="editDataModalLabel">Edit Config</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editMachineForm">
                        <div class="mb-3">
                            <label for="editSensorId" class="form-label">Sensor ID</label>
                            <input type="text" class="form-control" id="editSensorId" required>
                        </div>
                        <div class="mb-3">
                            <label for="editMachineId" class="form-label">Machine No</label>
                            <input type="number" class="form-control" id="editMachineId" required>
                        </div>
                        <div class="mb-3">
                            <label for="editLine" class="form-label">Line</label>
                            <input type="number" class="form-control" id="editLine" required>
                        </div>
                        <div class="mb-3">
                            <label for="editNote" class="form-label">Note</label>
                            <textarea class="form-control" id="editNote" rows="2"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary" form="editMachineForm">Save</button>
                </div>
            </div>
        </div>
    </div>
</main>
<script src="/js/machine_utils.js"></script>
<script src="/js/pagination.js"></script>
<script>
    let currentPage = 1;
    let totalPages = 1;
    $(document).ready(function () {
        // load today when refresh page
        loadPage(currentPage);
        checkSyncConfig();
    });

    function loadPage(page = 1) {
        currentPage = page;
        loadData(page);
    }

    function loadData(page) {
        $.ajax({
            url: `/machine/api/sensor-config`,
            method: "GET",
            data: { page },
            dataType: "json",
            success: function (response) {
                let tableBody = $("#tableBody");
                let pagination = $("#pagination");
                // Clear old data
                tableBody.empty();
                pagination.empty();
                // Populate table with new data
                response.data.forEach((item, index) => {
                    tableBody.append(`
                        <tr>
                            <td class="d-none d-xl-table-cell">${(response.current_page - 1) * response.limit + index + 1}</td>
                            <td class="d-none d-xl-table-cell">${item.sensor_id}</td>
                            <td class="d-none d-xl-table-cell">${item.machine_id}</td>
                            <td class="d-none d-md-table-cell">${item.line}</td>
                            <td class="d-none d-md-table-cell">${item.note || ""}</td>
                            <td class="d-none d-md-table-cell">
                                <button class="btn btn-warning btn-sm me-1" onclick="editConfig('${item.id}', '${item.sensor_id}', '${item.machine_id}', '${item.line}', \`${item.note || ''}\`)">Edit</button>
                                <button class="btn btn-danger btn-sm" onclick="deleteConfig('${item.id}')">Delete</button>
                            </td>
                        </tr>
                    `);
                });

                totalPages = response.total_pages;

                // Create pagination buttons
                createPageNumber('pagination', response.current_page, response.total_pages);

                // Handle Pagination Clicks
                $(document).off("click", ".page-link").on("click", ".page-link", function (event) {
                    event.preventDefault();
                    let page = $(this).data("page");
                    loadPage(page);
                });

                // Handle "Enter" Key Press
                $("#gotoPage").on("keypress", function (e) {
                    if (e.which === 13) { // Enter key
                        let page = parseInt($(this).val());
                        let minPage = parseInt($(this).attr("min"), 10);
                        let maxPage = parseInt($(this).attr("max"), 10);
                        if (page >= minPage && page <= maxPage) {
                            loadPage(page); // Function to load the selected page
                        } else {
                            alert("Invalid page number!");
                        }
                    }

                });
            }
        });
    }

    function exportExcel() {
        console.log("Exporting...");
        // Trigger file download
        window.location.href = `/machine/api/sensor-config/excel`;
    }

    function addConfig() {
        const modal = new bootstrap.Modal(document.getElementById('addDataModal'));
        modal.show();
    }

    function editConfig(id, sensor_id, machine_id, line, note) {
        console.log("editConfig", id, sensor_id, machine_id, line, note);

        // Fill the modal form fields
        document.getElementById('editSensorId').value = sensor_id;
        document.getElementById('editMachineId').value = machine_id;
        document.getElementById('editLine').value = line;
        document.getElementById('editNote').value = note || '';

        // Optional: store the ID in a hidden input or global variable
        document.getElementById('editMachineForm').dataset.editId = id;

        // Show the modal
        const modal = new bootstrap.Modal(document.getElementById('editDataModal'));
        modal.show();
    }

    function deleteConfig(id) {
        if (!confirm("Are you sure you want to delete this config?")) return;
        console.log("deleteConfig", id);
        sendDeleteConfig(id);
    }

    function syncConfig() {
        if (!confirm("Sync config to server?")) return;
        sendSyncConfig();
    }

    function getNextSensorId(lastId) {
        const match = lastId.match(/^PZEM(\d+)$/);
        if (!match) return "PZEM0001";

        const nextNum = parseInt(match[1], 10) + 1;
        return "PZEM" + nextNum.toString().padStart(4, '0');
    }

    const modalEl = document.getElementById('addDataModal');

    modalEl.addEventListener('shown.bs.modal', function () {
        // Fetch latest sensor ID
        $.getJSON('/machine/api/sensor-config/last-id', function (response) {
            console.log(response.lastSensorId);
            const newId = getNextSensorId(response.lastSensorId);
            document.getElementById('sensorId').value = newId;
        }).fail(function (xhr) {
            console.error('Failed to fetch last sensor ID', xhr);
            document.getElementById('sensorId').value = "PZEM0001";
        });
    });


    document.getElementById('addMachineForm').addEventListener('submit', function (e) {
        e.preventDefault();

        const config = {
            sensorId: document.getElementById('sensorId').value.trim(),
            machineId: parseInt(document.getElementById('machineId').value),
            line: parseInt(document.getElementById('line').value),
            note: document.getElementById('note').value.trim()
        };

        sendPostSensorConfig(config);

        // Reset the form
        e.target.reset();

        if (document.activeElement) {
            document.activeElement.blur();
        }
        const el = document.getElementById('addDataModal');
        let modal = bootstrap.Modal.getInstance(el);
        if (!modal) modal = new bootstrap.Modal(el);
        modal.hide();
    });

    document.getElementById('editMachineForm').addEventListener('submit', function (e) {
        e.preventDefault();

        const form = e.target;
        const editId = form.dataset.editId || null;

        const config = {
            id: editId,
            sensorId: document.getElementById('editSensorId').value.trim(),
            machineId: parseInt(document.getElementById('editMachineId').value),
            line: parseInt(document.getElementById('editLine').value),
            note: document.getElementById('editNote').value.trim()
        };

        if (editId) {
            delete form.dataset.editId;
            sendPutSensorConfig(config);
        }

        // Reset the form
        e.target.reset();

        if (document.activeElement) {
            document.activeElement.blur();
        }
        const el = document.getElementById('editDataModal');
        let modal = bootstrap.Modal.getInstance(el);
        if (!modal) modal = new bootstrap.Modal(el);
        modal.hide();
    });

    function sendPostSensorConfig(config) {
        $.ajax({
            url: `/machine/api/sensor-config`,
            method: "POST",
            contentType: 'application/json',
            dataType: 'json',
            data: JSON.stringify({
                sensor_id: config.sensorId,
                machine_id: config.machineId,
                line: config.line,
                note: config.note
            }),
            success: function (response) {
                alert("Create config successfully!");
                loadPage(totalPages);
                handleNotifySyncConfig(true);
            },
            error: function (xhr, status, error) {
                let message = "error";
                if (xhr.responseJSON && xhr.responseJSON.message) {
                    message = xhr.responseJSON.message;
                }
                alert(message);
            }
        });
    }

    function sendPutSensorConfig(config) {
        $.ajax({
            url: `/machine/api/sensor-config/${config.id}`,
            method: "PUT",
            contentType: 'application/json',
            dataType: 'json',
            data: JSON.stringify({
                sensor_id: config.sensorId,
                machine_id: config.machineId,
                line: config.line,
                note: config.note
            }),
            success: function (response) {
                alert("Edit config successfully!");
                loadPage(currentPage);
                checkSyncConfig();
            },
            error: function (xhr, status, error) {
                let message = "error";
                if (xhr.responseJSON && xhr.responseJSON.message) {
                    message = xhr.responseJSON.message;
                }
                alert(message);
            }
        });
    }

    function sendDeleteConfig(id) {
        $.ajax({
            url: `/machine/api/sensor-config/${id}`,
            method: "DELETE",
            success: function () {
                loadPage(currentPage);
                handleNotifySyncConfig(true);
            },
            error: function (xhr) {
                alert(xhr.responseJSON?.message || "Delete failed");
            }
        });
    }

    function sendSyncConfig() {
        $.ajax({
            url: `/machine/api/sync-sensor-config`,
            method: "PUT",
            success: function () {
                alert("Sync config successfully!");
                handleNotifySyncConfig(false);
            },
            error: function (xhr) {
                alert(xhr.responseJSON?.message || "Sync failed");
            }
        });
    }

    function checkSyncConfig() {
        $.ajax({
            url: `/machine/api/check-sync-config`,
            method: "GET",
            success: function (response) {
                let hasChange = response.has_change;
                console.log("checkSyncConfig", hasChange);
                handleNotifySyncConfig(hasChange);
            },
            error: function (xhr) {

            }
        });
    }

    function handleNotifySyncConfig(hasChange = false) {
        let btn = $("#syncConfigBtn");

        if (hasChange) {
            // Add notify icon (🔔 or red dot)
            if (!btn.find(".notify-icon").length) {
                btn.append(`
                        <span class="notify-icon ms-2" style="
                            display: inline-block;
                            width: 18px;
                            height: 18px;
                            line-height: 18px;
                            text-align: center;
                            background-color: red;
                            color: white;
                            border-radius: 50%;
                            font-weight: bold;
                            font-size: 14px;
                        ">!</span>`);
            }
        } else {
            // Remove notify icon
            btn.find(".notify-icon").remove();
        }
    }
</script>